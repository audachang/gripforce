#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Sat Aug 21 23:58:48 2021"
echo "(version 7.17, July 16, 2021)"
echo "execution started: `date`"

# to execute via tcsh: 
#   tcsh -xef proc.sub0001 |& tee output.proc.sub0001
# to execute via bash: 
#   tcsh -xef proc.sub0001 2>&1 | tee output.proc.sub0001

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 27 Jun 2019
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 27 Jun 2019)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with

set subj = sub-$argv[1]
set subj2 = sub$argv[1]


# assign output directory name
set output_dir = /media/DATA2/GripForce/out/afni/subject_results/group.young/subj.{$subj2}/$subj2.results


# set list of runs
set runs = (`count -digits 2 1 2`)


# copy stim files into stimulus directory
cp /media/DATA2/GripForce/beh/{$subj}_ses-01_task-GFORCE_run-01-40%.1D  \
    /media/DATA2/GripForce/beh/{$subj}_ses-01_task-GFORCE_run-01-60%.1D \
    /media/DATA2/GripForce/beh/{$subj}_ses-01_task-GFORCE_run-02-40%.1D \
    /media/DATA2/GripForce/beh/{$subj}_ses-01_task-GFORCE_run-02-60%.1D \
    $output_dir/stimuli

# copy extra stim files
cp                                                                                                                        \
    /media/DATA2/GripForce/out/fmriprep/{$subj}/ses-01/func/{$subj}_ses-01_task-GFORCE_desc-confounds_sel_timeseries.1D \
    $output_dir/stimuli

# copy anatomy to results dir
#3dcopy                                                                                                                     \
#    /media/DATA2/GripForce/out/afni/{$subj}/ses-01/anat/{$subj}_ses-01_space-MNI152NLin2009cAsym_desc-preproc_T1w.nii.gz \
#    $output_dir/{$subj}_ses-01_space-MNI152NLin2009cAsym_desc-preproc_T1w


# ============================ auto block: tcat ============================

# and make note of repetitions (TRs) per run
set tr_counts = ( 196 196 )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir
pwd

# ================================ regress =================================
# note TRs that were not censored
set ktrs = `1d_tool.py -infile outcount_{$subj2}_censor.1D                 \
                       -show_trs_uncensored encoded`

set lab1 = R40
set lab2 = R60
set lab3 = L40
set lab4 = L60

# ------------------------------
# run the regression analysis
3dDeconvolve -input pb01.$subj2.r*.blur+tlrc.HEAD                          \
    -mask full_mask.$subj2+tlrc                                            \
    -censor outcount_{$subj2}_censor.1D                                    \
    -polort 4 -float                                                      \
    -num_stimts 5                                                         \
    -stim_times 1 stimuli/{$subj}_ses-01_task-GFORCE_run-01-40%.1D 'GAM' \
    -stim_label 1 $lab1                                                     \
    -stim_times 2 stimuli/{$subj}_ses-01_task-GFORCE_run-01-60%.1D 'GAM' \
    -stim_label 2 $lab2                                                     \
    -stim_times 3 stimuli/{$subj}_ses-01_task-GFORCE_run-02-40%.1D 'GAM' \
    -stim_label 3 $lab3                                                   \
    -stim_times 4 stimuli/{$subj}_ses-01_task-GFORCE_run-02-60%.1D 'GAM' \
    -stim_label 4 $lab4                                                     \
    -stim_file 5                                                          \
    stimuli/{$subj}_ses-01_task-GFORCE_desc-confounds_sel_timeseries.1D  \
    -stim_label 5 non_interest                                            \
    -jobs 20                                                              \
    -num_glt 11                                                           \
    -gltsym 'SYM: L60 -L40'                                               \
    -glt_label 1 L60-L40                                                  \
    -gltsym 'SYM: R60 -R40'                                               \
    -glt_label 2 R60-R40                                                  \
    -gltsym 'SYM: L40 +L60 -R60 -R40'                                     \
    -glt_label 3 L-R                                                      \
    -gltsym 'SYM: L60 +R60 -L40 -R40'                                     \
    -glt_label 4 60-40                                                    \
    -gltsym 'SYM: L40 +L60'                                               \
    -glt_label 5 L                                                        \
    -gltsym 'SYM: R40 +R60'                                               \
    -glt_label 6 R                                                        \
    -gltsym 'SYM: L40 +R40'                                               \
    -glt_label 7 40                                                       \
    -gltsym 'SYM: L60 +R60'                                               \
    -glt_label 8 60                                                       \
    -gltsym 'SYM: R40 +R60 -L40 -L60'                                     \
    -glt_label 9 R-L                                                      \
    -gltsym 'SYM: R60 -R40 -L60 +L40'                                     \
    -glt_label 10 int1                                                    \
    -gltsym 'SYM: L60 -L40 -R60 +R40'                                     \
    -glt_label 11 int2                                                    \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                               \
    -x1D_uncensored X.nocensor.xmat.1D                                    \
    -errts errts.{$subj2}                                                  \
    -bucket stats.{$subj2}                                                    \
    -overwrite


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# display any large pairwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# display degrees of freedom info from X-matrix
1d_tool.py -show_df_info -infile X.xmat.1D |& tee out.df_info.txt

if (-f stats.{$subj2}_REMLvar+tlrc.HEAD) then
    rm stats.{$subj2}_REML*
    rm errts.{$subj2}_REML*

endif

# -- execute the 3dREMLfit script, written by 3dDeconvolve --
tcsh -x stats.REML_cmd 

# if 3dREMLfit fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dREMLfit error, failing...'
    exit
endif


# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj2 pb01.$subj2.r*.blur+tlrc.HEAD -overwrite

# --------------------------------------------------
# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
3dTstat -mean -prefix rm.signal.all all_runs.$subj2+tlrc"[$ktrs]" -overwrite
3dTstat -stdev -prefix rm.noise.all errts.${subj2}_REML+tlrc"[$ktrs]" -overwrite
3dcalc -a rm.signal.all+tlrc                                              \
       -b rm.noise.all+tlrc                                               \
       -expr 'a/b' -prefix TSNR.$subj \
       -overwrite

# ---------------------------------------------------
# compute and store GCOR (global correlation average)
# (sum of squares of global mean of unit errts)
3dTnorm -norm2 -prefix rm.errts.unit errts.${subj2}_REML+tlrc -overwrite
3dmaskave -quiet -mask full_mask.$subj2+tlrc rm.errts.unit+tlrc            \
          > mean.errts.unit.1D 
3dTstat -sos -prefix - mean.errts.unit.1D\' > out.gcor.1D
echo "-- GCOR = `cat out.gcor.1D`"

# ---------------------------------------------------
# compute correlation volume
# (per voxel: correlation with masked brain average)
3dmaskave -quiet -mask full_mask.$subj2+tlrc errts.${subj2}_REML+tlrc       \
          > mean.errts.1D
3dTcorr1D -prefix corr_brain errts.${subj2}_REML+tlrc mean.errts.1D -overwrite

# create fitts dataset from all_runs and errts
3dcalc -a all_runs.$subj2+tlrc -b errts.${subj2}+tlrc -expr a-b             \
       -prefix fitts.$subj2 -overwrite
# create fitts from REML errts
3dcalc -a all_runs.$subj2+tlrc -b errts.${subj2}_REML+tlrc -expr a-b        \
       -prefix fitts.$subj2\_REML -overwrite

# create ideal files for fixed response stim types
1dcat X.nocensor.xmat.1D'[10]' > ideal_L40.1D
1dcat X.nocensor.xmat.1D'[11]' > ideal_L60.1D
1dcat X.nocensor.xmat.1D'[12]' > ideal_R40.1D
1dcat X.nocensor.xmat.1D'[13]' > ideal_R60.1D

# --------------------------------------------------
# extract non-baseline regressors from the X-matrix,
# then compute their sum
1d_tool.py -infile X.nocensor.xmat.1D -write_xstim X.stim.xmat.1D -overwrite
3dTstat -sum -prefix sum_ideal.1D X.stim.xmat.1D -overwrite

# ============================ blur estimation =============================
# compute blur estimates
if (-f blur_est.$subj2.1D) then
    rm blur_est.$subj2.1D
endif
touch blur_est.$subj2.1D   # start with empty file

# create directory for ACF curve files
#mkdir files_ACF

# -- estimate blur for each run in epits --
if (-f blur.epits.1D) then
    rm blur.epits.1D
endif
touch blur.epits.1D

# restrict to uncensored TRs, per run
foreach run ( $runs )
    set trs = `1d_tool.py -infile X.xmat.1D -show_trs_uncensored encoded  \
                          -show_trs_run $run -overwrite`
    if ( $trs == "" ) continue
    3dFWHMx -detrend -mask full_mask.$subj2+tlrc                           \
            -ACF files_ACF/out.3dFWHMx.ACF.epits.r$run.1D                 \
            all_runs.$subj2+tlrc"[$trs]" >> blur.epits.1D
end

# compute average FWHM blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.epits.1D'{0..$(2)}'\'` )
echo average epits FWHM blurs: $blurs
echo "$blurs   # epits FWHM blur estimates" >> blur_est.$subj2.1D

# compute average ACF blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.epits.1D'{1..$(2)}'\'` )
echo average epits ACF blurs: $blurs
echo "$blurs   # epits ACF blur estimates" >> blur_est.$subj2.1D

# -- estimate blur for each run in errts --
if (-f blur.errts.1D) then
    rm blur.errts.1D
endif
touch blur.errts.1D

# restrict to uncensored TRs, per run
foreach run ( $runs )
    set trs = `1d_tool.py -infile X.xmat.1D -show_trs_uncensored encoded  \
                          -show_trs_run $run -overwrite`
    if ( $trs == "" ) continue
    3dFWHMx -detrend -mask full_mask.$subj2+tlrc                           \
            -ACF files_ACF/out.3dFWHMx.ACF.errts.r$run.1D                 \
            errts.${subj2}+tlrc"[$trs]" >> blur.errts.1D
end

# compute average FWHM blur (from every other row) and append
set blurs = ( `3dTstat -mean -overwrite -prefix - blur.errts.1D'{0..$(2)}'\'` )
echo average errts FWHM blurs: $blurs
echo "$blurs   # errts FWHM blur estimates" >> blur_est.$subj2.1D

# compute average ACF blur (from every other row) and append
set blurs = ( `3dTstat -mean -overwrite -prefix - blur.errts.1D'{1..$(2)}'\'` )
echo average errts ACF blurs: $blurs
echo "$blurs   # errts ACF blur estimates" >> blur_est.$subj2.1D

# -- estimate blur for each run in err_reml --
if (-f blurr.err_reml.1D) then
    rm blurr.err_reml.1D
endif    
touch blur.err_reml.1D

# restrict to uncensored TRs, per run
foreach run ( $runs )
    set trs = `1d_tool.py -infile X.xmat.1D -show_trs_uncensored encoded  \
                          -show_trs_run $run -ovrwrite`
    if ( $trs == "" ) continue
    3dFWHMx -detrend -mask full_mask.$subj2+tlrc                           \
            -ACF files_ACF/out.3dFWHMx.ACF.err_reml.r$run.1D              \
            errts.${subj2}_REML+tlrc"[$trs]" >> blur.err_reml.1D
end

# compute average FWHM blur (from every other row) and append
set blurs = ( `3dTstat -mean -overwrite -prefix - blur.err_reml.1D'{0..$(2)}'\'` )
echo average err_reml FWHM blurs: $blurs
echo "$blurs   # err_reml FWHM blur estimates" >> blur_est.$subj2.1D

# compute average ACF blur (from every other row) and append
set blurs = ( `3dTstat -mean -overwrite -prefix - blur.err_reml.1D'{1..$(2)}'\'` )
echo average err_reml ACF blurs: $blurs
echo "$blurs   # err_reml ACF blur estimates" >> blur_est.$subj2.1D


# add 3dClustSim results as attributes to any stats dset
#mkdir files_ClustSim

# run Monte Carlo simulations using method 'ACF'
set params = ( `grep ACF blur_est.$subj2.1D | tail -n 1` )
3dClustSim -both -mask full_mask.$subj2+tlrc -acf $params[1-3]             \
           -cmd 3dClustSim.ACF.cmd -prefix files_ClustSim/ClustSim.ACF\
           -overwrite

# run 3drefit to attach 3dClustSim results to stats
set cmd = ( `cat 3dClustSim.ACF.cmd` )
$cmd stats.$subj+tlrc stats.${subj}_REML+tlrc


# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj \
    -dsets pb00.$subj2.r*.tcat+tlrc.HEAD -overwrite

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -exit0             \
    -out_limit 0.15                         \
    -mask_dset full_mask.$subj2+tlrc.HEAD    \
    -ss_review_dset out.ss_review.$subj2.txt \
    -write_uvars_json out.ss_review_uvars.json \
    -overwrite

# ========================== auto block: finalize ==========================

# remove temporary files
\rm -f rm.*

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) then
    ./@ss_review_basic |& tee out.ss_review.$subj2.txt

    # generate html ss review pages
    # (akin to static images from running @ss_review_driver)
    apqc_make_tcsh.py -review_style basic -subj_dir . \
        -uvar_json out.ss_review_uvars.json -overwrite
    tcsh @ss_review_html |& tee out.review_html
    apqc_make_html.py -qc_dir QC_$subj2

    echo "\nconsider running: \n\n    afni_open -b $subj2.results/QC_$subj2/index.html\n"
endif

# return to parent directory (just in case...)
cd ..

echo "execution finished: `date`"



